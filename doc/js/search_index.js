var search_data = {"index":{"searchIndex":["sort","bubble_sort()","quick_sort()","select_sort()"],"longSearchIndex":["sort","sort#bubble_sort()","sort#quick_sort()","sort#select_sort()"],"info":[["Sort","","Sort.html","",""],["bubble_sort","Sort","Sort.html#method-i-bubble_sort","(a)","<p>冒泡排序\n<p>它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。 走访数列的工作是重复地进行直到没有再需要交换，\n<p>名字由来 &mdash; 越小的元素会经由交换慢慢“浮”到数列的顶端，像 …\n"],["quick_sort","Sort","Sort.html#method-i-quick_sort","(a)","<p>快速排序\n<p>1.从列表中任意选择一个数作为基数 2.让列表中剩下的元素与基数作比较， 小于它的放在一边令其为a1， 大于它的放在另外一边令其为a2\n3.分别在a1和a2中重复执行第1和第2步，直到只剩一个元素 …\n"],["select_sort","Sort","Sort.html#method-i-select_sort","(a)","<p>选择排序\n<p>首先在未排序序列中找到最小元素，存放到排序序列的起始位置， 然后，再从剩余未排序元素中继续寻找最小元素，然后放到排序序列末尾。\n以此类推，直到所有元素均排序完毕。\n"]]}}