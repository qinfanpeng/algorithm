var search_data = {"index":{"searchIndex":["fibonacci","find","gsub","reverseprinter","find_e_from_a_two_dimension_array()","find_e_from_a_two_dimension_array1()","gsub()","new()","produce()","produce1()","reverse_print()","reverse_print1()"],"longSearchIndex":["fibonacci","find","gsub","reverseprinter","find#find_e_from_a_two_dimension_array()","find#find_e_from_a_two_dimension_array1()","gsub#gsub()","reverseprinter::new()","fibonacci#produce()","fibonacci#produce1()","reverseprinter#reverse_print()","reverseprinter#reverse_print1()"],"info":[["Fibonacci","","Fibonacci.html","",""],["Find","","Find.html","",""],["Gsub","","Gsub.html","",""],["ReversePrinter","","ReversePrinter.html","",""],["find_e_from_a_two_dimension_array","Find","Find.html#method-i-find_e_from_a_two_dimension_array","(a, n)",""],["find_e_from_a_two_dimension_array1","Find","Find.html#method-i-find_e_from_a_two_dimension_array1","(a, n)","<p>假设一个二维数组中，每一行从左到右都递增， 每一列从上到下也递增。 此方法用于判断一个整数是否存在于这样一个二维数组中之中\n"],["gsub","Gsub","Gsub.html#method-i-gsub","(s)","<p>字符串替换函数\n<p>自己实现一个简单算法把字符串中的空白字符全都替换为‘-+-’ ruby 自己带了个gsub方法， 现在自己实现它， 使其时间 复杂度为 O（n）.\n<p>1.思路是先统计出所有空格个数， 然后计算替换后的字符串总长度， …\n"],["new","ReversePrinter","ReversePrinter.html#method-c-new","()",""],["produce","Fibonacci","Fibonacci.html#method-i-produce","(n)","<p>非递归版\n"],["produce1","Fibonacci","Fibonacci.html#method-i-produce1","(n)","<p>递归版\n"],["reverse_print","ReversePrinter","ReversePrinter.html#method-i-reverse_print","(a)","<p>基于栈思想版\n"],["reverse_print1","ReversePrinter","ReversePrinter.html#method-i-reverse_print1","(a)","<p>基于递归版 递归思想和栈的思想有很大的关联， 很多时候两种策略可以互换\n"]]}}